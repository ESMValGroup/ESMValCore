<style>
  /* Style the tab */
  .tab {
    overflow: hidden;
    border: 1px solid #ccc;
    background-color: #f1f1f1;
  }

  /* Style the buttons that are used to open the tab content */
  .tab button {
    background-color: inherit;
    float: left;
    border: none;
    outline: none;
    cursor: pointer;
    padding: 14px 16px;
    transition: 0.3s;
  }

  /* Change background color of buttons on hover */
  .tab button:hover {
    background-color: #ddd;
  }

  /* Create an active/current tablink class */
  .tab button.active {
    background-color: #ccc;
  }

  /* Style the tab content */
  .tabbox {
    border: 1px solid #ccc;
  }
  .tabcontent {
    display: none;
    padding: 6px 12px;
    border-top: none;
</style>


<!-- Filter -->
<h3>Filter</h3>
<div class="filter">
    {% for filter_type, types in filters.items() %}
    <div class="filter_{{ filter_type }}">
        <p>{{ filter_type }}</p>
        <ul>
            {% for t in types %}
            <li><input type="checkbox" rel="f_{{ t|replace(' ', '_') }}" onclick="updateFilter()">{{ t|replace('_', ' ')|title }}</li>
            {% endfor %}
        </ul>
    </div>
    {% endfor %}
    <button onclick="resetFilter()">Reset Filter</button>
</div>



<!-- Tab links -->
<div class="tab">
  <button class="tablinks" onclick="openTab(event, 'All')" id="defaultOpen">All</button>
  {% for diagnostic in diagnostics %}
    <button class="tablinks" onclick="openTab(event, 'tab_{{ diagnostic.title }}')">{{ diagnostic.title }}</button>
  {% endfor %}
</div>

<div class="tabbox">
{% for diagnostic in diagnostics %}

  <div id="tab_{{diagnostic.title}}" class="tabcontent">
    <h2>{{ diagnostic.title }}</h2>
    <p>{{ diagnostic.description }}</p>

    {% for task in diagnostic.task_output %}

      {% include 'TaskOutput.j2' %}

    {% endfor %}
  </div>

{% endfor %}
</div>

<script>
  function openTab(evt, tabName) {
    // Declare all variables
    var i, tabcontent, tablinks;

    // Get all elements with class="tabcontent" and hide them
    tabcontent = document.getElementsByClassName("tabcontent");
    for (i = 0; i < tabcontent.length; i++) {
      tabcontent[i].style.display = "none";
    }

    // Get all elements with class="tablinks" and remove the class "active"
    tablinks = document.getElementsByClassName("tablinks");
    for (i = 0; i < tablinks.length; i++) {
      tablinks[i].className = tablinks[i].className.replace(" active", "");
    }

    // Show the current tab, and add an "active" class to the button that opened the tab
    if (tabName == "All"){
      for (i = 0; i < tabcontent.length; i++) {
        tabcontent[i].style.display = "block";
      }
    } else {
      document.getElementById(tabName).style.display = "block";
    }
    evt.currentTarget.className += " active";
  }


  // Get the element with id="defaultOpen" and click on it
  document.getElementById("defaultOpen").click();
</script>

<script>
  function toggleDataFiles(button, data_files_id) {
    var data_files = document.getElementById(data_files_id);
    if (data_files.style.display === "none") {
      data_files.style.display = "block";
      button.innerText = "Hide"
    } else {
      data_files.style.display = "none";
      button.innerText = "Show"
    }
  }


  // Hide all data files
  function hideDataFiles() {
    var i, list_data_files;
    list_data_files = document.getElementsByClassName("data_files");
    for (i = 0; i < list_data_files.length; i++) {
      list_data_files[i].style.display = "none";
    }
  }


  hideDataFiles()
</script>

<script>
function updateFilter(){
  var filterTypes = document.querySelectorAll(".filter div");
  
  var filters = Array(filterTypes.length);
  for (let i = 0; i < filterTypes.length; i++){
    let filterType = filterTypes[i];
    var checkboxes = document.querySelectorAll("."+ filterType.className +" input[type='checkbox']");
    filters[i] = getSelectedFilters(checkboxes);
  }

  applyFilter(filters);
}


function getSelectedFilters(checkboxes) {
  var classes = [];

  if (checkboxes && checkboxes.length > 0) {
    for (var i = 0; i < checkboxes.length; i++) {
      var cb = checkboxes[i];

      if (cb.checked) {
        classes.push(cb.getAttribute("rel"));
      }
    }
  }

  return classes;
}


function applyFilter(filters){
    var figures = document.getElementsByClassName("figure");
    
    if (!figures || figures.length == 0){
        return;
    }
    
    for (const fig of figures){
        fig.style.display = "block"; // Show by default
        for (const selection of filters){
            if (selection.length == 0) {
                continue;
            }
            let hide = true;
            for (const element of selection){
                if (fig.classList.contains(element)){
                    hide = false;
                }
            }
            if (hide){
                fig.style.display = "none";
                break; // Once it's hidden, there's no need to check more
            }
        }
    }

}


function resetFilter(){
    var filters = document.querySelectorAll(".filter input[type='checkbox']");
    for (const f of filters){
        f.checked = false;
    }
    updateFilter()
}


resetFilter()
</script>